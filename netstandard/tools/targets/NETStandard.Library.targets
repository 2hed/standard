<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup Condition="'$(NETStandardToolsTaskDirectory)' == ''">
    <NETStandardToolsTaskDirectory>$(MSBuildThisFileDirectory)</NETStandardToolsTaskDirectory>
    <NETStandardToolsTaskDirectory Condition="'$(MSBuildRuntimeType)' != 'Core'">$(MSBuildThisFileDirectory)desktop/</NETStandardToolsTaskDirectory>
  </PropertyGroup>

  <PropertyGroup>
    <NETStandardLibraryPackageVersion>#VERSION#</NETStandardLibraryPackageVersion>
  </PropertyGroup>

  <Choose>
    <!-- Condition here is a hack until https://github.com/dotnet/sdk/issues/534 is fixed -->
    <When Condition="'$(TargetFramework)' != '' or '$(TargetFrameworks)' != ''">
      <!-- NuGet 4, run after the targets that construct items from deps -->
      <PropertyGroup>
        <HandlePackageFileConflictsAfter>ResolvePackageDependenciesForBuild</HandlePackageFileConflictsAfter>
        <HandlePublishFileConflictsAfter>RunResolvePublishAssemblies</HandlePublishFileConflictsAfter>
      </PropertyGroup>
    </When>
    <When Condition="'$(ResolveNuGetPackages)' == 'true' and Exists('$(ProjectLockFile)')">
      <!-- NuGet 3, run after the target that constructs items from lock file -->
      <PropertyGroup>
        <HandlePackageFileConflictsAfter>ResolveNuGetPackageAssets</HandlePackageFileConflictsAfter>
      </PropertyGroup>
    </When>
    <Otherwise>
      <!-- NuGet 2, run before targets that consume references -->
      <PropertyGroup>
        <ResolveAssemblyReferencesDependsOn>$(ResolveAssemblyReferencesDependsOn);HandlePackageFileConflicts</ResolveAssemblyReferencesDependsOn>
        <PrepareResourcesDependsOn>HandlePackageFileConflicts;$(PrepareResourcesDependsOn)</PrepareResourcesDependsOn>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <ItemGroup>
    <Reference Condition="'$(_NetStandardLibraryRefPath)' != ''" Include="$(_NetStandardLibraryRefPath)*.dll">
      <!-- Private = false to make these reference only -->
      <Private>false</Private>
      <NuGetPackageId>NETStandard.Library</NuGetPackageId>
      <NuGetPackageVersion>$(NETStandardLibraryPackageVersion)</NuGetPackageVersion>
      <NuGetIsFrameworkReference>false</NuGetIsFrameworkReference>
      <NuGetSourceType>Package</NuGetSourceType>
    </Reference>
    <ReferenceCopyLocalPaths Condition="'$(_NetStandardLibraryLibPath)' != ''" Include="$(_NetStandardLibraryLibPath)*.dll">
      <Private>false</Private>
      <NuGetPackageId>NETStandard.Library</NuGetPackageId>
      <NuGetPackageVersion>$(NETStandardLibraryPackageVersion)</NuGetPackageVersion>
      <NuGetIsFrameworkReference>false</NuGetIsFrameworkReference>
      <NuGetSourceType>Package</NuGetSourceType>
    </ReferenceCopyLocalPaths>
  </ItemGroup>

  <UsingTask TaskName="HandlePackageFileConflicts" AssemblyFile="$(NETStandardToolsTaskDirectory)NETStandard.Tools.dll" />
  <Target Name="HandlePackageFileConflicts" AfterTargets="$(HandlePackageFileConflictsAfter)">
    <HandlePackageFileConflicts References="@(Reference)"
                                ReferenceCopyLocalPaths="@(ReferenceCopyLocalPaths)"
                                ExternalRuntimeItems="@(PackageConflictExternalRuntimeItems)"
                                PreferredPackages="$(PackageConflictPreferredPackages)">
      <Output TaskParameter="ReferencesWithoutConflicts" ItemName="_ReferencesWithoutConflicts" />
      <Output TaskParameter="ReferenceCopyLocalPathsWithoutConflicts" ItemName="_ReferenceCopyLocalPathsWithoutConflicts" />
    </HandlePackageFileConflicts>

    <!-- Replace Reference / ReferenceCopyLocalPaths with the filtered lists.
         We must remove all and include rather than just remove since removal is based
         only on ItemSpec and duplicate ItemSpecs may exist with different metadata 
         (eg: HintPath) -->
    <ItemGroup>
      <Reference Remove="@(Reference)" />
      <Reference Include="@(_ReferencesWithoutConflicts)" />
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" />
      <ReferenceCopyLocalPaths Include="@(_ReferenceCopyLocalPathsWithoutConflicts)" />
    </ItemGroup>
  </Target>

  <Target Name="HandlePublishFileConflicts" AfterTargets="$(HandlePublishFileConflictsAfter)">
    <HandlePackageFileConflicts ReferenceCopyLocalPaths="@(ResolvedAssembliesToPublish)"
                                PreferredPackages="$(PackageConflictPreferredPackages)">
      <Output TaskParameter="ReferenceCopyLocalPathsWithoutConflicts" ItemName="_ResolvedAssembliesToPublishWithoutConflicts" />
    </HandlePackageFileConflicts>
    <ItemGroup>
      <ResolvedAssembliesToPublish Remove="@(ResolvedAssembliesToPublish)" />
      <ResolvedAssembliesToPublish Include="@(_ResolvedAssembliesToPublishWithoutConflicts)" />
    </ItemGroup>
  </Target>
</Project>